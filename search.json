[{"path":"https://mjfrigaard.github.io/segtools/articles/datasets.html","id":"applookupriskcat-vs--lookupriskcat","dir":"Articles","previous_headings":"","what":"AppLookUpRiskCat vs. LookUpRiskCat","title":"Lookup datasets","text":"two LookUpRiskCat datasets data GitHub repo, ’ll compare contents. LookUpRiskCat two additional columns, otherwise risk_cat, ABSLB, ABSUB identical.","code":"x <- get_seg_data(\"AppLookUpRiskCat\") y <- get_seg_data(\"LookUpRiskCat\") waldo::compare(   x = names(x),   y = names(y) ) #> `old[2:3]`:                           \"ABSLB\"           \"ABSUB\"        #> `new`:      \"RiskCat\" \"ABSLB\" \"ABSUB\" \"RiskCatRangeTxt\" \"RiskCatLabel\" waldo::compare(   x = x$risk_cat,   y = y$RiskCat ) #> ✔ No differences waldo::compare(   x = x$ABSLB,   y = y$ABSLB ) #> ✔ No differences waldo::compare(   x = x$ABSUB,   y = y$ABSUB ) #> ✔ No differences"},{"path":"https://mjfrigaard.github.io/segtools/articles/datasets.html","id":"appriskpairdata-vs-riskpairdata","dir":"Articles","previous_headings":"","what":"AppRiskPairData vs RiskPairData","title":"Lookup datasets","text":"risk pairs data also two versions (AppRiskPairData RiskPairData): AppRiskPairData RiskPairData three identical columns: REF/RefVal, BGM/MeasVal, RiskFactor. AppRiskPairData two additional columns (RiskPairID abs_risk).","code":"x <- get_seg_data(\"AppRiskPairData\") y <- get_seg_data(\"RiskPairData\") waldo::compare(   x = names(x),   y = names(y) ) #> `old`:      \"RiskPairID\" \"REF\"     \"BGM\" \"RiskFactor\" \"abs_risk\"   #> `new[2:4]`: \"RefVal\"     \"MeasVal\"                    \"RiskFactor\" waldo::compare(   x = x$REF,   y = y$RefVal ) #> ✔ No differences waldo::compare(   x = x$BGM,   y = y$MeasVal ) #> ✔ No differences waldo::compare(   x = x$RiskFactor,   y = y$RiskFactor ) #> ✔ No differences"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"load-test-data","dir":"Articles","previous_headings":"","what":"Load test data","title":"Risk Tables","text":"segtools package uses testthat, common testing framework performing unit tests. ’ll load test data file used GitHub repo (VanderbiltComplete.csv) run shiny app generate tables comparison.","code":"github_data_root <-   \"https://raw.githubusercontent.com/mjfrigaard/seg-shiny-data/master/Data/\" full_sample_repo <- base::paste0(github_data_root,   \"VanderbiltComplete.csv\") test_vand_comp_data <-   vroom::vroom(file = full_sample_repo, delim = \",\") glimpse(test_vand_comp_data) #> Rows: 9,891 #> Columns: 2 #> $ BGM <dbl> 121, 212, 161, 191, 189, 104, 293, 130, 261, 147, 83, 132, 146, 24… #> $ REF <dbl> 127, 223, 166, 205, 210, 100, 296, 142, 231, 148, 81, 131, 155, 25…"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"application-version-1-3-3-functions","dir":"Articles","previous_headings":"","what":"Application (version 1.3.3) functions","title":"Risk Tables","text":"three functions helpers.R file application repo.","code":""},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"seg-variables","dir":"Articles","previous_headings":"Application (version 1.3.3) functions","what":"SEG variables","title":"Risk Tables","text":"SEG variables initially created segTable() function. ’ve included :","code":"segTable <- function(dat) {    # 3.1 - import data frame -----   SampMeasData <- suppressWarnings(readr::read_csv(file = dat))    SampMeasData %>%     dplyr::mutate(BGM = as.double(BGM),                   REF = as.double(REF)) %>%    # create bgm_pair_cat ----      dplyr::mutate(       bgm_pair_cat =         dplyr::case_when(           BGM < REF ~ \"BGM < REF\",           BGM == REF ~ \"BGM = REF\",           BGM > REF ~ \"BGM > REF\"         )     ) |>      # 3.3 create ref_pair_2cat ----      dplyr::mutate(       ref_pair_2cat =         dplyr::case_when(           REF > 600 ~ \"REF > 600: Excluded from SEG Analysis\",           REF < 21 & REF <= 600 ~ \"REF <21: Included in SEG Analysis\"         )     ) %>%     # # 3.4 create included ----      dplyr::mutate(       included =         dplyr::case_when(           REF <= 600 ~ \"Total included in SEG Analysis\",           REF > 600 ~ \"Total excluded in SEG Analysis\"         )     ) %>%     # 3.5 join to RiskPairData ----      dplyr::inner_join(.,       y = RiskPairData,       by = c(\"BGM\", \"REF\")     ) %>%     dplyr::mutate( # 3.6 Create risk_cat variable ----       risk_cat =         base::findInterval(           x = abs_risk, # the abs_risk absolute value           vec = LookUpRiskCat$ABSLB, # the lower bound absolute risk           left.open = TRUE         ) - 1     ) %>%     dplyr::inner_join( # 3.7 Join to LookUpRiskCat data ----        x = ., y = LookUpRiskCat, # inner join to look-up       by = \"risk_cat\"     ) %>%     dplyr::mutate(       risk_cat_txt = # text risk categories       dplyr::case_when(         abs_risk < 0.5 ~ \"None\",         abs_risk >= 0.5 & abs_risk <= 1 ~ \"Slight, Lower\",         abs_risk > 1 & abs_risk <= 1.5 ~ \"Slight, Higher\",         abs_risk > 1.5 & abs_risk <= 2.0 ~ \"Moderate, Lower\",         abs_risk > 2 & abs_risk <= 2.5 ~ \"Moderate, Higher\",         abs_risk > 2.5 & abs_risk <= 3.0 ~ \"Severe, Lower\",         abs_risk > 3.0 & abs_risk <= 3.5 ~ \"Severe, Higher\",         abs_risk > 3.5 ~ \"Extreme\"       )     ) %>%     dplyr::mutate(       rel_diff = (BGM - REF) / REF, # relative diff       abs_rel_diff = abs(rel_diff), # abs relative diff       sq_rel_diff = rel_diff^2,       iso_diff =       if_else(REF >= 100, # condition 1         100 * abs(BGM - REF) / REF, # T 1         if_else(REF < 100, # condition 2           abs(BGM - REF), # T 2           NA_real_         ), # F 2         NA_real_       ), # F1       iso_range = # # 4.3.16 create iso range variable ----       dplyr::case_when(           # # A tibble: 5 x 2           #      ID iso_range           #   <int> <chr>           # 1     1 <= 5% or 5 mg/dL           # 2     2 > 5 - 10% or mg/dL           # 3     3 > 10 - 15% or mg/dL           # 4     4 > 15 - 20% mg/dL           # 5     5 > 20% or 20 mg/dL         iso_diff <= 5 ~ \"<= 5% or 5 mg/dL\",         iso_diff > 5 & iso_diff <= 10 ~ \"> 5 - 10% or mg/dL\",         iso_diff > 10 & iso_diff <= 15 ~ \"> 10 - 15% or mg/dL\",         iso_diff > 15 & iso_diff <= 20 ~ \"> 15 - 20% mg/dL\",         iso_diff > 20 ~ \"> 20% or 20 mg/dL\"),        risk_grade = dplyr::case_when(         abs_risk >= 0.0 & abs_risk < 0.5 ~ \"A\",         abs_risk >= 0.5 & abs_risk < 1.0 ~ \"B\",         abs_risk >= 1.0 & abs_risk < 2.0 ~ \"C\",         abs_risk >= 2.0 & abs_risk < 3.0 ~ \"D\",         abs_risk >= 3.0 ~ \"E\"       ),       risk_grade_txt = dplyr::case_when(         abs_risk >= 0.0 & abs_risk < 0.5 ~ \"0 - 0.5\",         abs_risk >= 0.5 & abs_risk < 1.0 ~ \"> 0.5 - 1.0\",         abs_risk >= 1.0 & abs_risk < 2.0 ~ \"> 1.0 - 2.0\",         abs_risk >= 2.0 & abs_risk < 3.0 ~ \"> 2.0 - 3.0\",         abs_risk >= 3.0 ~ \"> 3.0\"       )     ) }"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"error","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > SEG variables","what":"Error","title":"Risk Tables","text":"try full_sample_repo, get following error:","code":"segTable(dat = full_sample_repo) #> Error in loadNamespace(x): there is no package called 'readr'"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"seg-risk-category-columns","dir":"Articles","previous_headings":"Application (version 1.3.3) functions","what":"SEG Risk Category Columns","title":"Risk Tables","text":"’ll split segTable() two parts identify bug: seg_risk_cat_cols() imports AppLookUpRiskCat.csv AppRiskPairData.csv inside function. test seg_risk_cat_cols() test_vand_comp_data:","code":"seg_risk_cat_cols <- function(df) {   github_data_root <-     \"https://raw.githubusercontent.com/mjfrigaard/seg-shiny-data/master/Data/\"    # import LookUpRiskCat -----   app_lookup_repo <- base::paste0(     github_data_root,     \"AppLookUpRiskCat.csv\"   )   LookUpRiskCat <- vroom::vroom(file = app_lookup_repo, delim = \",\")    # import RiskPairData -----   app_riskpair_repo <- base::paste0(     github_data_root,     \"AppRiskPairData.csv\"   )   RiskPairData <- vroom::vroom(file = app_riskpair_repo, delim = \",\")    # directly manipulate df   bgm_ref_tbl <- dplyr::mutate(df,     BGM = as.double(BGM),     REF = as.double(REF)   )    # create bgm_pair_cat ----   bgm_pair_cat_tbl <- dplyr::mutate(bgm_ref_tbl,     bgm_pair_cat =       dplyr::case_when(         BGM < REF ~ \"BGM < REF\",         BGM == REF ~ \"BGM = REF\",         BGM > REF ~ \"BGM > REF\"       )   )   # create ref_pair_2cat ----   ref_pair_2cat_tbl <- dplyr::mutate(bgm_pair_cat_tbl,     ref_pair_2cat =       dplyr::case_when(         REF > 600 ~ \"REF > 600: Excluded from SEG Analysis\",         REF < 21 & REF <= 600 ~ \"REF <21: Included in SEG Analysis\"       )   )   # create included ----   included_tbl <- dplyr::mutate(ref_pair_2cat_tbl,     included =       dplyr::case_when(         REF <= 600 ~ \"Total included in SEG Analysis\",         REF > 600 ~ \"Total excluded in SEG Analysis\"       )   )   # join to RiskPairData ----   risk_pair_tbl <- dplyr::inner_join(included_tbl,     y = RiskPairData,     by = c(\"BGM\", \"REF\")   )   # Create risk_cat variable ----   risk_cat_tbl <- dplyr::mutate(risk_pair_tbl,     risk_cat =       base::findInterval(         x = abs_risk, # the abs_risk absolute value         vec = LookUpRiskCat$ABSLB, # the lower bound absolute risk         left.open = TRUE       ) - 1   )   # Join to LookUpRiskCat data ----   risk_cat_join_tbl <- dplyr::inner_join(     x = risk_cat_tbl,     y = LookUpRiskCat, # inner join to look-up     by = \"risk_cat\"   )   # create text risk categories ----   seg_risk_cat_cols_tbl <- dplyr::mutate(risk_cat_join_tbl,       risk_cat_txt =        dplyr::case_when(         abs_risk < 0.5 ~ \"None\",         abs_risk >= 0.5 & abs_risk <= 1 ~ \"Slight, Lower\",         abs_risk > 1 & abs_risk <= 1.5 ~ \"Slight, Higher\",         abs_risk > 1.5 & abs_risk <= 2.0 ~ \"Moderate, Lower\",         abs_risk > 2 & abs_risk <= 2.5 ~ \"Moderate, Higher\",         abs_risk > 2.5 & abs_risk <= 3.0 ~ \"Severe, Lower\",         abs_risk > 3.0 & abs_risk <= 3.5 ~ \"Severe, Higher\",         abs_risk > 3.5 ~ \"Extreme\"       )     )   return(seg_risk_cat_cols_tbl) } seg_risk_cat_cols(df = test_vand_comp_data) #> # A tibble: 9,868 × 12 #>      BGM   REF bgm_pair_cat ref_pair_2cat included         RiskPairID RiskFactor #>    <dbl> <dbl> <chr>        <chr>         <chr>                 <dbl>      <dbl> #>  1   121   127 BGM < REF    NA            Total included …      72849    0.00254 #>  2   212   223 BGM < REF    NA            Total included …     127636    0.0280  #>  3   161   166 BGM < REF    NA            Total included …      96928    0       #>  4   191   205 BGM < REF    NA            Total included …     114997    0.206   #>  5   189   210 BGM < REF    NA            Total included …     113800    0.209   #>  6   104   100 BGM > REF    NA            Total included …      62605   -0.125   #>  7   293   296 BGM < REF    NA            Total included …     176390    0       #>  8   130   142 BGM < REF    NA            Total included …      78273    0.267   #>  9   261   231 BGM > REF    NA            Total included …     157093   -0.285   #> 10   147   148 BGM < REF    NA            Total included …      88496    0       #> # ℹ 9,858 more rows #> # ℹ 5 more variables: abs_risk <dbl>, risk_cat <dbl>, ABSLB <dbl>, ABSUB <dbl>, #> #   risk_cat_txt <chr>"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"seg-iso-range-columns","dir":"Articles","previous_headings":"Application (version 1.3.3) functions","what":"SEG ISO Range Columns","title":"Risk Tables","text":"seg_iso_cols() creates ISO columns: seg_iso_cols() accepts output seg_risk_cat_cols() returns dataset risk/ISO variables.","code":"seg_iso_cols <- function(risk_cat_cols) {     iso_cols_tbl <- dplyr::mutate(risk_cat_cols,        rel_diff = (BGM - REF) / REF, # relative diff       abs_rel_diff = abs(rel_diff), # abs relative diff       sq_rel_diff = rel_diff^2,       iso_diff =       if_else(REF >= 100, # condition 1         100 * abs(BGM - REF) / REF, # T 1         if_else(REF < 100, # condition 2           abs(BGM - REF), # T 2           NA_real_         ), # F 2         NA_real_       ), # F1       iso_range = # # 4.3.16 create iso range variable ----       dplyr::case_when(         iso_diff <= 5 ~ \"<= 5% or 5 mg/dL\",         iso_diff > 5 & iso_diff <= 10 ~ \"> 5 - 10% or mg/dL\",         iso_diff > 10 & iso_diff <= 15 ~ \"> 10 - 15% or mg/dL\",         iso_diff > 15 & iso_diff <= 20 ~ \"> 15 - 20% mg/dL\",         iso_diff > 20 ~ \"> 20% or 20 mg/dL\"),        risk_grade = dplyr::case_when(         abs_risk >= 0.0 & abs_risk < 0.5 ~ \"A\",         abs_risk >= 0.5 & abs_risk < 1.0 ~ \"B\",         abs_risk >= 1.0 & abs_risk < 2.0 ~ \"C\",         abs_risk >= 2.0 & abs_risk < 3.0 ~ \"D\",         abs_risk >= 3.0 ~ \"E\"       ),       risk_grade_txt = dplyr::case_when(         abs_risk >= 0.0 & abs_risk < 0.5 ~ \"0 - 0.5\",         abs_risk >= 0.5 & abs_risk < 1.0 ~ \"> 0.5 - 1.0\",         abs_risk >= 1.0 & abs_risk < 2.0 ~ \"> 1.0 - 2.0\",         abs_risk >= 2.0 & abs_risk < 3.0 ~ \"> 2.0 - 3.0\",         abs_risk >= 3.0 ~ \"> 3.0\"       )     )     return(iso_cols_tbl) } risk_cat_vars <- seg_risk_cat_cols(df = test_vand_comp_data) iso_vars_tbl <- seg_iso_cols(risk_cat_cols = risk_cat_vars) glimpse(iso_vars_tbl) #> Rows: 9,868 #> Columns: 19 #> $ BGM            <dbl> 121, 212, 161, 191, 189, 104, 293, 130, 261, 147, 83, 1… #> $ REF            <dbl> 127, 223, 166, 205, 210, 100, 296, 142, 231, 148, 81, 1… #> $ bgm_pair_cat   <chr> \"BGM < REF\", \"BGM < REF\", \"BGM < REF\", \"BGM < REF\", \"BG… #> $ ref_pair_2cat  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ included       <chr> \"Total included in SEG Analysis\", \"Total included in SE… #> $ RiskPairID     <dbl> 72849, 127636, 96928, 114997, 113800, 62605, 176390, 78… #> $ RiskFactor     <dbl> 0.0025445, 0.0279900, 0.0000000, 0.2061100, 0.2086500, … #> $ abs_risk       <dbl> 0.0025445, 0.0279900, 0.0000000, 0.2061100, 0.2086500, … #> $ risk_cat       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… #> $ ABSLB          <dbl> -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001,… #> $ ABSUB          <dbl> 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, … #> $ risk_cat_txt   <chr> \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\",… #> $ rel_diff       <dbl> -0.047244094, -0.049327354, -0.030120482, -0.068292683,… #> $ abs_rel_diff   <dbl> 0.047244094, 0.049327354, 0.030120482, 0.068292683, 0.1… #> $ sq_rel_diff    <dbl> 2.232004e-03, 2.433188e-03, 9.072434e-04, 4.663891e-03,… #> $ iso_diff       <dbl> 4.7244094, 4.9327354, 3.0120482, 6.8292683, 10.0000000,… #> $ iso_range      <chr> \"<= 5% or 5 mg/dL\", \"<= 5% or 5 mg/dL\", \"<= 5% or 5 mg/… #> $ risk_grade     <chr> \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", … #> $ risk_grade_txt <chr> \"0 - 0.5\", \"0 - 0.5\", \"0 - 0.5\", \"0 - 0.5\", \"0 - 0.5\", …"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"combine-seg-risk-category-and-iso-range-columns","dir":"Articles","previous_headings":"Application (version 1.3.3) functions","what":"Combine SEG Risk Category and ISO Range columns","title":"Risk Tables","text":"seg_risk_vars() wrapper around seg_risk_cat_cols() seg_iso_cols(): check differences seg_risk_vars() iso_vars_tbl output:","code":"seg_risk_vars <- function(df) {   seg_risk_cat_cols <- function(df) {   github_data_root <-     \"https://raw.githubusercontent.com/mjfrigaard/seg-shiny-data/master/Data/\"    # import LookUpRiskCat -----   app_lookup_repo <- base::paste0(     github_data_root,     \"AppLookUpRiskCat.csv\"   )   LookUpRiskCat <- vroom::vroom(file = app_lookup_repo, delim = \",\")    # import RiskPairData -----   app_riskpair_repo <- base::paste0(     github_data_root,     \"AppRiskPairData.csv\"   )   RiskPairData <- vroom::vroom(file = app_riskpair_repo, delim = \",\")    # directly manipulate df   bgm_ref_tbl <- dplyr::mutate(df,     BGM = as.double(BGM),     REF = as.double(REF)   )    # create bgm_pair_cat ----   bgm_pair_cat_tbl <- dplyr::mutate(bgm_ref_tbl,     bgm_pair_cat =       dplyr::case_when(         BGM < REF ~ \"BGM < REF\",         BGM == REF ~ \"BGM = REF\",         BGM > REF ~ \"BGM > REF\"       )   )   # create ref_pair_2cat ----   ref_pair_2cat_tbl <- dplyr::mutate(bgm_pair_cat_tbl,     ref_pair_2cat =       dplyr::case_when(         REF > 600 ~ \"REF > 600: Excluded from SEG Analysis\",         REF < 21 & REF <= 600 ~ \"REF <21: Included in SEG Analysis\"       )   )   # create included ----   included_tbl <- dplyr::mutate(ref_pair_2cat_tbl,     included =       dplyr::case_when(         REF <= 600 ~ \"Total included in SEG Analysis\",         REF > 600 ~ \"Total excluded in SEG Analysis\"       )   )   # join to RiskPairData ----   risk_pair_tbl <- dplyr::inner_join(included_tbl,     y = RiskPairData,     by = c(\"BGM\", \"REF\")   )   # Create risk_cat variable ----   risk_cat_tbl <- dplyr::mutate(risk_pair_tbl,     risk_cat =       base::findInterval(         x = abs_risk, # the abs_risk absolute value         vec = LookUpRiskCat$ABSLB, # the lower bound absolute risk         left.open = TRUE       ) - 1   )   # Join to LookUpRiskCat data ----   risk_cat_join_tbl <- dplyr::inner_join(     x = risk_cat_tbl,     y = LookUpRiskCat, # inner join to look-up     by = \"risk_cat\"   )   # create text risk categories ----   seg_risk_cat_cols_tbl <- dplyr::mutate(risk_cat_join_tbl,       risk_cat_txt =        dplyr::case_when(         abs_risk < 0.5 ~ \"None\",         abs_risk >= 0.5 & abs_risk <= 1 ~ \"Slight, Lower\",         abs_risk > 1 & abs_risk <= 1.5 ~ \"Slight, Higher\",         abs_risk > 1.5 & abs_risk <= 2.0 ~ \"Moderate, Lower\",         abs_risk > 2 & abs_risk <= 2.5 ~ \"Moderate, Higher\",         abs_risk > 2.5 & abs_risk <= 3.0 ~ \"Severe, Lower\",         abs_risk > 3.0 & abs_risk <= 3.5 ~ \"Severe, Higher\",         abs_risk > 3.5 ~ \"Extreme\"       )     )   return(seg_risk_cat_cols_tbl)   }      risk_cat_cols <- seg_risk_cat_cols(df = test_vand_comp_data)    seg_iso_cols <- function(risk_cat_cols) {     iso_cols_tbl <- dplyr::mutate(risk_cat_cols,        rel_diff = (BGM - REF) / REF, # relative diff       abs_rel_diff = abs(rel_diff), # abs relative diff       sq_rel_diff = rel_diff^2,       iso_diff =       if_else(REF >= 100, # condition 1         100 * abs(BGM - REF) / REF, # T 1         if_else(REF < 100, # condition 2           abs(BGM - REF), # T 2           NA_real_         ), # F 2         NA_real_       ), # F1       iso_range = # # 4.3.16 create iso range variable ----       dplyr::case_when(         iso_diff <= 5 ~ \"<= 5% or 5 mg/dL\",         iso_diff > 5 & iso_diff <= 10 ~ \"> 5 - 10% or mg/dL\",         iso_diff > 10 & iso_diff <= 15 ~ \"> 10 - 15% or mg/dL\",         iso_diff > 15 & iso_diff <= 20 ~ \"> 15 - 20% mg/dL\",         iso_diff > 20 ~ \"> 20% or 20 mg/dL\"),        risk_grade = dplyr::case_when(         abs_risk >= 0.0 & abs_risk < 0.5 ~ \"A\",         abs_risk >= 0.5 & abs_risk < 1.0 ~ \"B\",         abs_risk >= 1.0 & abs_risk < 2.0 ~ \"C\",         abs_risk >= 2.0 & abs_risk < 3.0 ~ \"D\",         abs_risk >= 3.0 ~ \"E\"       ),       risk_grade_txt = dplyr::case_when(         abs_risk >= 0.0 & abs_risk < 0.5 ~ \"0 - 0.5\",         abs_risk >= 0.5 & abs_risk < 1.0 ~ \"> 0.5 - 1.0\",         abs_risk >= 1.0 & abs_risk < 2.0 ~ \"> 1.0 - 2.0\",         abs_risk >= 2.0 & abs_risk < 3.0 ~ \"> 2.0 - 3.0\",         abs_risk >= 3.0 ~ \"> 3.0\"       )     )     return(iso_cols_tbl)   }      risk_vars <- seg_iso_cols(risk_cat_cols = risk_cat_cols)   return(risk_vars) } risk_vars_tbl <- seg_risk_vars(df = test_vand_comp_data) waldo::compare(x = iso_vars_tbl, y = risk_vars_tbl) #> ✔ No differences"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"pair-type-table","dir":"Articles","previous_headings":"Application (version 1.3.3) functions","what":"Pair Type Table","title":"Risk Tables","text":"original pairtypeTable() function : ’ve re-written seg_pair_type_tbl()","code":"pairtypeTable <- function(dat) {   # 2.1.1 - import data frame/define SampMeasData ----   SampMeasData <- readr::read_csv(dat)   # 2.1.2 - convert the columns to numeric  ----   SampMeasData <- SampMeasData |>      dplyr::mutate(BGM = as.double(BGM),                   REF = as.double(REF |>      # 2.2 create bgm_pair_cat ----    dplyr::mutate(     bgm_pair_cat =       dplyr::case_when(         BGM < REF ~ \"BGM < REF\",         BGM == REF ~ \"BGM = REF\",         BGM > REF ~ \"BGM > REF\"       )   ) |>      # 2.3 create excluded ----    dplyr::mutate(     excluded =       dplyr::case_when(         REF > 600 ~ \"REF > 600: Excluded from SEG Analysis\",         TRUE ~ NA_character_       )   ) |>      # 2.4 create included ----    dplyr::mutate(     included =       dplyr::case_when(         REF <= 600 ~ \"Total included in SEG Analysis\",         REF > 600 ~ \"Total excluded in SEG Analysis\"       )   )   # 2.5 create BGMPairs ----   BGMPairs <- SampMeasData  |>      dplyr::count(bgm_pair_cat)  |>      dplyr::rename(       `Pair Type` = bgm_pair_cat,       Count = n     )   # 2.6 create Excluded ----   Excluded <- SampMeasData  |>      dplyr::count(excluded) |>      dplyr::rename(       `Pair Type` = excluded,       Count = n     )  |>      dplyr::filter(!is.na(`Pair Type`))   # 2.7 create Included ----   Included <- SampMeasData  |>      dplyr::count(included)  |> %     dplyr::rename(       `Pair Type` = included,       Count = n     ) |>      dplyr::filter(`Pair Type` == \"Total included in SEG Analysis\")   # 2.8 create PairTypeTable ----   PairTypeTable <- dplyr::bind_rows(BGMPairs,                                      Excluded,                                      Included)   # 2.9 add the Total row  ----   PairTypeTable <- PairTypeTable |> tibble::add_row(     `Pair Type` = \"Total\",     Count = nrow(SampMeasData),     .after = 0   )   return(PairTypeTable) }"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"seg_pair_type_tbl","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > Pair Type Table","what":"seg_pair_type_tbl()","title":"Risk Tables","text":"test function full_sample_repo data (VanderbiltComplete.csv), see following:","code":"seg_pair_type_tbl <- function(df) {   # manipulate data directly    samp_meas_data <- dplyr::mutate(.data = df,        BGM = as.double(BGM),       REF = as.double(REF),     # create bgm_pair_cat ----     bgm_pair_cat =       dplyr::case_when(         BGM < REF ~ \"BGM < REF\",         BGM == REF ~ \"BGM = REF\",         BGM > REF ~ \"BGM > REF\"       ),     # create excluded ----      excluded =       dplyr::case_when(         REF > 600 ~ \"REF > 600: Excluded from SEG Analysis\",         TRUE ~ NA_character_       ),     # create included ----      included =       dplyr::case_when(         REF <= 600 ~ \"Total included in SEG Analysis\",         REF > 600 ~ \"Total excluded in SEG Analysis\"       )   )      # create bgm_pair_cnt_tbl ----   bgm_pair_cnt_tbl <- dplyr::count(samp_meas_data,      bgm_pair_cat)   # create bgm_pairs_tbl ----   bgm_pairs_tbl <- dplyr::rename(.data = bgm_pair_cnt_tbl,                        `Pair Type` = bgm_pair_cat,                       Count = n)      # create excluded_cnts_tbl ----   excluded_cnts_tbl <- dplyr::count(samp_meas_data, excluded)    # create excluded_pairs_tbl ----   excluded_pairs_tbl <- dplyr::rename(excluded_cnts_tbl,       `Pair Type` = excluded,       Count = n) |>      dplyr::filter(!is.na(`Pair Type`))      # create Included ----   included_cnts_tbl <- dplyr::count(samp_meas_data, included)      included_pairs_tbl <- dplyr::rename(included_cnts_tbl,       `Pair Type` = included,       Count = n     ) |>      dplyr::filter(`Pair Type` == \"Total included in SEG Analysis\")      # 2.8 create pair_types ----   pair_types <- dplyr::bind_rows(bgm_pairs_tbl,                                      excluded_pairs_tbl,                                      included_pairs_tbl)   # 2.9 add the Total row  ----   pair_type_tbl <- tibble::add_row(pair_types,     `Pair Type` = \"Total\",     Count = nrow(samp_meas_data),     .after = 0   )   return(pair_type_tbl) } seg_pair_type_tbl(df = test_vand_comp_data) #> # A tibble: 6 × 2 #>   `Pair Type`                           Count #>   <chr>                                 <int> #> 1 Total                                  9891 #> 2 BGM < REF                              4710 #> 3 BGM = REF                               479 #> 4 BGM > REF                              4702 #> 5 REF > 600: Excluded from SEG Analysis    23 #> 6 Total included in SEG Analysis         9868"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"application-pairtypetable","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > Pair Type Table","what":"Application PairTypeTable","title":"Risk Tables","text":"uploading VanderbiltComplete.csv, first table Summary Tables tab pairs table:  ’ve also stored app_pairs_tbl:","code":"app_pairs_tbl = tibble::as_tibble(data.frame(   stringsAsFactors = FALSE,   check.names = FALSE,   `Pair Type` = c(     \"Total\",     \"BGM < REF\",     \"BGM = REF\",     \"BGM > REF\",     \"REF > 600: Excluded from SEG Analysis\",     \"Total included in SEG Analysis\"   ),   Count = c(9891L, 4710L, 479L, 4702L, 23L, 9868L) ))"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"test","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > Pair Type Table > Application PairTypeTable","what":"Test","title":"Risk Tables","text":"test two tables identical, use testthat’s testthat::expect_equal() function, object set seg_pair_type_tbl(dat = test_vand_comp_data) expected set app_pairs_tbl.","code":"testthat::test_that(\"Test seg_pair_type_tbl()\", {   testthat::expect_equal(     # function table     object = seg_pair_type_tbl(df = test_vand_comp_data),      # application table     expected = app_pairs_tbl   ) }) #> Test passed 🎉"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"mard-table","dir":"Articles","previous_headings":"Application (version 1.3.3) functions","what":"MARD Table","title":"Risk Tables","text":"MARDTable created server function application, starting . ’ve converted function, seg_mard_tbl(), takes output seg_risk_vars():","code":""},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"seg_mard_tbl","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > MARD Table","what":"seg_mard_tbl()","title":"Risk Tables","text":"test seg_mard_tbl() function","code":"seg_mard_tbl <- function(risk_vars) {   mard_cols <- data.frame(     Total = c(nrow(risk_vars)),     Bias = c(mean(risk_vars$rel_diff)),     MARD = c(mean(risk_vars$abs_rel_diff)),     CV = c(sd(risk_vars$rel_diff)),     stringsAsFactors = FALSE,     check.names = FALSE   )    lower_tbl <- tibble::add_column(     .data = mard_cols,     `Lower 95% Limit of Agreement` = mard_cols$Bias - 1.96 * mard_cols$CV   )   upper_tbl <- tibble::add_column(     .data = lower_tbl,     `Upper 95% Limit of Agreement` = mard_cols$Bias + 1.96 * mard_cols$CV   )   mard_vars <- dplyr::mutate(     .data = upper_tbl,     Bias = base::paste0(base::round(       100 * Bias,       digits = 1     ), \"%\"),     MARD = base::paste0(base::round(       100 * MARD,       digits = 1     ), \"%\"),     CV = base::paste0(base::round(       100 * CV,       digits = 1     ), \"%\"),     `Lower 95% Limit of Agreement` = base::paste0(base::round(       100 * `Lower 95% Limit of Agreement`,       digits = 1     ), \"%\"),     `Upper 95% Limit of Agreement` = base::paste0(base::round(       100 * `Upper 95% Limit of Agreement`,       digits = 1     ), \"%\")   )   mard_vars_tbl <- tibble::as_tibble(mard_vars)   return(mard_vars_tbl) } seg_mard_tbl(risk_vars = risk_vars_tbl)"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"application-mardtable","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > MARD Table","what":"Application MARDTable","title":"Risk Tables","text":"MARD table application :  , store app’s MARD table object can test using datapasta::tribble_paste() (app_mard_tbl).","code":"app_mard_tbl <- tibble::tibble(     Total = 9868L,     Bias = \"0.6%\",     MARD = \"7%\",     CV = \"14.8%\",     `Lower 95% Limit of Agreement` = \"-28.3%\",     `Upper 95% Limit of Agreement` = \"29.6%\") app_mard_tbl"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"test-1","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > MARD Table > Application MARDTable","what":"Test","title":"Risk Tables","text":"test MARD tables using testthat::expect_equal() :","code":"testthat::test_that(\"Test MARD table values\", { testthat::expect_equal(   # function table   object = seg_mard_tbl(risk_vars = risk_vars_tbl),   # application table   expected = app_mard_tbl   ) }) #> Test passed 😀"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"risk-grade-table","dir":"Articles","previous_headings":"Application (version 1.3.3) functions","what":"Risk Grade Table","title":"Risk Tables","text":"RiskGradeTable3 also created server, ’ve wrapped function: ’ll compare application output :","code":"seg_risk_grade_tbl <- function(risk_vars) {   risk_grade_cnts <- dplyr::count(risk_vars,     risk_grade,     sort = TRUE   )    lkpRiskGrade <- tibble::tibble(       risk_grade_id = c(1, 2, 3, 4, 5),       risk_grade = c(\"A\", \"B\", \"C\", \"D\", \"E\"),       REF = c(\"0 - 0.5\", \"> 0.5 - 1.0\", \"> 1.0 - 2.0\", \"> 2.0 - 3.0\", \"> 3.0\"))      risk_grade_joined <- dplyr::full_join(     x = risk_grade_cnts,     y = lkpRiskGrade,     by = \"risk_grade\"   )    # change lkp table variables   risk_grade_vars_tbl <- dplyr::mutate(     .data = risk_grade_joined,     risk_grade_id = as.numeric(risk_grade_id),     Percent = base::paste0(       base::round(n / nrow(risk_vars) * 100,         digits = 1       ),       if_else(condition = is.na(n),         true = \"\", false = \"%\"       )     )   ) |>      # rename variables     dplyr::select(       ID = risk_grade_id,       `Risk Grade` = risk_grade,       `Number of Pairs` = n,       Percent,       # `REF Range` = REF       `Risk Factor Range` = REF     )      return(risk_grade_vars_tbl) } seg_risk_grade_tbl(risk_vars = risk_vars_tbl)"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"application-riskgradetable","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > Risk Grade Table","what":"Application RiskGradeTable","title":"Risk Tables","text":"can build manually wrap output tibble data.frame). can see discrepancies due risk_grade risk_grade_txt seg_iso_cols() function:","code":"app_risk_grade_tbl <- as.data.frame(   tibble::tibble(     ID = c(1L, 2L, 3L, 4L, 5L),     `Risk Grade` = c('A', 'B', 'C', 'D', 'E'),     `Number of Pairs` = c(9474L, 349L, 35L, 10L, NA_integer_),     Percent = c('96%', '3.5%', '0.4%', '0.1%', NA_character_),     `Risk Factor Range` = c('0 - 0.5', '> 0.5 - 1.5', '> 1.5 - 2.5',       '> 2.5 - 3.5', '> 3.5'),   ) ) app_risk_grade_tbl risk_grade = dplyr::case_when(         abs_risk >= 0.0 & abs_risk < 0.5 ~ \"A\",         abs_risk >= 0.5 & abs_risk < 1.5 ~ \"B\",         abs_risk >= 1.5 & abs_risk < 2.5 ~ \"C\",         abs_risk >= 2.5 & abs_risk < 3.5 ~ \"D\",         abs_risk >= 3.5 ~ \"E\"       ),       risk_grade_txt = dplyr::case_when(         abs_risk >= 0.0 & abs_risk < 0.5 ~ \"0 - 0.5\",         abs_risk >= 0.5 & abs_risk < 1.0 ~ \"> 0.5 - 1.0\",         abs_risk >= 1.0 & abs_risk < 2.0 ~ \"> 1.0 - 2.0\",         abs_risk >= 2.0 & abs_risk < 3.0 ~ \"> 2.0 - 3.0\",         abs_risk >= 3.0 ~ \"> 3.0\"       )"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"update-seg_risk_vars","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > Risk Grade Table","what":"Update seg_risk_vars()","title":"Risk Tables","text":"remedy issue updated seg_risk_vars() Now check seg_risk_vars() seg_risk_grade_tbl() functions:","code":"seg_risk_vars <- function(df) {      seg_risk_cat_cols <- function(df) {     LookUpRiskCat <- data.frame(       risk_cat = c(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L),       ABSLB = c(-0.001, 0.5, 1, 1.5, 2, 2.5, 3, 3.5),       ABSUB = c(0.5, 1, 1.5, 2, 2.5, 3, 3.5, 10)     )      # import RiskPairData -----     RiskPairData <- segtools::RiskPairData      # directly manipulate df     bgm_ref_tbl <- dplyr::mutate(df,       BGM = as.double(BGM),       REF = as.double(REF)     )      # create bgm_pair_cat ----     bgm_pair_cat_tbl <- dplyr::mutate(bgm_ref_tbl,       bgm_pair_cat =         dplyr::case_when(           BGM < REF ~ \"BGM < REF\",           BGM == REF ~ \"BGM = REF\",           BGM > REF ~ \"BGM > REF\"         )     )     # create ref_pair_2cat ----     ref_pair_2cat_tbl <- dplyr::mutate(bgm_pair_cat_tbl,       ref_pair_2cat =         dplyr::case_when(           REF > 600 ~ \"REF > 600: Excluded from SEG Analysis\",           REF < 21 & REF <= 600 ~ \"REF <21: Included in SEG Analysis\"         )     )     # create included ----     included_tbl <- dplyr::mutate(ref_pair_2cat_tbl,       included =         dplyr::case_when(           REF <= 600 ~ \"Total included in SEG Analysis\",           REF > 600 ~ \"Total excluded in SEG Analysis\"         )     )     # join to RiskPairData ----     risk_pair_tbl <- dplyr::inner_join(included_tbl,       y = RiskPairData,       by = c(\"BGM\", \"REF\")     )     # Create risk_cat variable ----     risk_cat_tbl <- dplyr::mutate(risk_pair_tbl,       risk_cat =         base::findInterval(           x = abs_risk, # the abs_risk absolute value           vec = LookUpRiskCat$ABSLB, # the lower bound absolute risk           left.open = TRUE         ) - 1     )     # Join to LookUpRiskCat data ----     risk_cat_join_tbl <- dplyr::inner_join(       x = risk_cat_tbl,       y = LookUpRiskCat, # inner join to look-up       by = \"risk_cat\"     )     # create text risk categories ----     seg_risk_cat_vars_tbl <- dplyr::mutate(risk_cat_join_tbl,       risk_cat_txt =         dplyr::case_when(           abs_risk < 0.5 ~ \"None\",           abs_risk >= 0.5 & abs_risk <= 1 ~ \"Slight, Lower\",           abs_risk > 1 & abs_risk <= 1.5 ~ \"Slight, Higher\",           abs_risk > 1.5 & abs_risk <= 2.0 ~ \"Moderate, Lower\",           abs_risk > 2 & abs_risk <= 2.5 ~ \"Moderate, Higher\",           abs_risk > 2.5 & abs_risk <= 3.0 ~ \"Severe, Lower\",           abs_risk > 3.0 & abs_risk <= 3.5 ~ \"Severe, Higher\",           abs_risk > 3.5 ~ \"Extreme\"         )     )     return(seg_risk_cat_vars_tbl)   }    risk_cat_vars_tbl <- seg_risk_cat_cols(df = df)    seg_iso_cols <- function(risk_cat_vars) {     iso_vars_tbl <- dplyr::mutate(risk_cat_vars,       rel_diff = (BGM - REF) / REF, # relative diff       abs_rel_diff = abs(rel_diff), # abs relative diff       sq_rel_diff = rel_diff^2,       iso_diff =         if_else(REF >= 100, # condition 1           100 * abs(BGM - REF) / REF, # T 1           if_else(REF < 100, # condition 2             abs(BGM - REF), # T 2             NA_real_           ), # F 2           NA_real_         ), # F1       iso_range = # # 4.3.16 create iso range variable ----         dplyr::case_when(           iso_diff <= 5 ~ \"<= 5% or 5 mg/dL\",           iso_diff > 5 & iso_diff <= 10 ~ \"> 5 - 10% or mg/dL\",           iso_diff > 10 & iso_diff <= 15 ~ \"> 10 - 15% or mg/dL\",           iso_diff > 15 & iso_diff <= 20 ~ \"> 15 - 20% mg/dL\",           iso_diff > 20 ~ \"> 20% or 20 mg/dL\"         ),       risk_grade = dplyr::case_when(         abs_risk >= 0.0 & abs_risk < 0.5 ~ \"A\",         abs_risk >= 0.5 & abs_risk < 1.5 ~ \"B\",         abs_risk >= 1.5 & abs_risk < 2.5 ~ \"C\",         abs_risk >= 2.5 & abs_risk < 3.5 ~ \"D\",         abs_risk >= 3.5 ~ \"E\"       ),       risk_grade_txt = dplyr::case_when(         abs_risk >= 0.0 & abs_risk < 0.5 ~ \"0 - 0.5\",         abs_risk >= 0.5 & abs_risk < 1.5 ~ \"> 0.5 - 1.5\",         abs_risk >= 1.5 & abs_risk < 2.5 ~ \"> 1.5 - 2.5\",         abs_risk >= 2.5 & abs_risk < 3.5 ~ \"> 2.5 - 3.5\",         abs_risk >= 3.5 ~ \"> 3.5\"       )     )     return(iso_vars_tbl)   }    iso_vars_tbl <- seg_iso_cols(risk_cat_vars = risk_cat_vars_tbl)    return(iso_vars_tbl) } # risk_cat_vars_tbl <- seg_risk_cat_cols(df = test_vand_comp_data) # risk_vars_tbl <- seg_iso_cols(risk_cat_vars = risk_cat_vars_tbl) risk_vars_tbl <- seg_risk_vars(df = test_vand_comp_data) risk_grade_tbl <- seg_risk_grade_tbl(risk_vars = risk_vars_tbl) risk_grade_tbl #> # A tibble: 5 × 5 #>      ID `Risk Grade` `Number of Pairs` Percent `Risk Factor Range` #>   <dbl> <chr>                    <int> <chr>   <chr>               #> 1     1 A                         9474 96%     0 - 0.5             #> 2     2 B                          349 3.5%    > 0.5 - 1.0         #> 3     3 C                           35 0.4%    > 1.0 - 2.0         #> 4     4 D                           10 0.1%    > 2.0 - 3.0         #> 5     5 E                           NA NA      > 3.0"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"test-2","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > Risk Grade Table > Update seg_risk_vars()","what":"Test","title":"Risk Tables","text":"risk grade table doesn’t necessarily require test entire table structure–can focus specific columns care output (like Number Pairs) testthat::expect_equal() uses waldo package make comparisons, ’ll use first check Number Pairs columns: Now can formally test columns using testthat::expect_equal() limit testing Number Pairs column:","code":"waldo::compare(   x = risk_grade_tbl$`Number of Pairs`,    y = app_risk_grade_tbl$`Number of Pairs` ) #> ✔ No differences testthat::test_that(\"Test risk grade table\", { testthat::expect_equal(   # function table   object = risk_grade_tbl$`Number of Pairs`,    # application table   expected = app_risk_grade_tbl$`Number of Pairs`   ) }) #> Test passed 🥳"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"risk-category-table","dir":"Articles","previous_headings":"Application (version 1.3.3) functions","what":"Risk Category Table","title":"Risk Tables","text":"SEGRiskCategoryTable4 table created app server function, ’ve re-written seg_risk_cat_tbl(risk_vars = )","code":"seg_risk_cat_tbl <- function(risk_vars) {   # count risk cats risk_cat_cnts <- dplyr::count(risk_vars,   risk_cat,   sort = TRUE )  # define lkpSEGRiskCat4 ---- lkpSEGRiskCat4 <- tibble::tibble(   risk_cat = 0:7,   risk_cat_txt = c(     \"None\",     \"Slight, Lower\",     \"Slight, Higher\",     \"Moderate, Lower\",     \"Moderate, Higher\",     \"Severe, Lower\",     \"Severe, Upper\",     \"Extreme\"   ),   ABSLB = c(-0.001, 0.5, 1, 1.5, 2, 2.5, 3, 3),   ABSUB = c(0.5, 1, 1.5, 2, 2.5, 3, 3.5, 1000) )  risk_cat_joined <- dplyr::full_join(   x = risk_cat_cnts,   y = lkpSEGRiskCat4,   by = \"risk_cat\" )  risk_cat_cols <- dplyr::mutate(   risk_cat_joined,   risk_cat = as.numeric(risk_cat),   Percent = base::paste0(     base::round(n / nrow(risk_vars) * 100,       digits = 1     ),     if_else(       condition = is.na(n),       true = \"\",       false = \"%\"     )   ) ) |>    dplyr::arrange(desc(n))  risk_cat_vars <- dplyr::select(risk_cat_cols,     `SEG Risk Level` = risk_cat,     `SEG Risk Category` = risk_cat_txt,     `Number of Pairs` = n,     Percent   ) return(risk_cat_vars) } seg_risk_cat_tbl(risk_vars_tbl)"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"application-riskcategorytable","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > Risk Category Table","what":"Application RiskCategoryTable","title":"Risk Tables","text":"app display risk level table.  risk level table also built DT, ’ve built app_risk_level_tbl (testing)","code":"app_risk_level_tbl <- as.data.frame(   tibble::tibble(     `SEG Risk Level` = c(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L),     `SEG Risk Category` = c(       'None',        'Slight, Lower', 'Slight, Higher',       'Moderate, Lower','Moderate, Higher',       'Severe, Lower', 'Severe, Higher',       'Extreme'     ),     `Number of Pairs` = c(9474L, 294L, 55L, 24L, 11L, 10L, NA_integer_, NA_integer_),     Percent = c(       '96%', '3%', '0.6%', '0.2%', '0.1%', '0.1%', NA_character_, NA_character_     ),   ) ) app_risk_level_tbl"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"test-3","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > Risk Category Table > Application RiskCategoryTable","what":"Test","title":"Risk Tables","text":"’ll limit test Number Pairs column.","code":"testthat::test_that(\"Test risk category pairs\", { testthat::expect_equal(   # function table   object = seg_risk_cat_tbl(risk_vars_tbl)$`Number of Pairs`,    # application table   expected = app_risk_level_tbl$`Number of Pairs`   ) }) #> Test passed 🎊"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"iso-range-table","dir":"Articles","previous_headings":"Application (version 1.3.3) functions","what":"ISO Range Table","title":"Risk Tables","text":"ISORangeTable5 table also created server function App.R file. ’ve re-written seg_iso_range_tbl():","code":"seg_iso_range_tbl <- function(risk_vars) {    lkpISORanges <- tibble::tribble(        ~ID,                ~iso_range,         1L,    \"<= 5% or 5 mg/dL\",         2L,  \"> 5 - 10% or mg/dL\",         3L, \"> 10 - 15% or mg/dL\",         4L,    \"> 15 - 20% mg/dL\",         5L,   \"> 20% or 20 mg/dL\")    iso_range_cnts <- dplyr::count(risk_vars,     iso_range,     sort = TRUE   )    iso_range_joined <- dplyr::full_join(     x = iso_range_cnts,     y = lkpISORanges,     by = \"iso_range\"   )     iso_range_vars <- dplyr::mutate(iso_range_joined,     Percent = base::paste0(       base::round(n / nrow(risk_vars) * 100,         digits = 1       ),       dplyr::if_else(condition = is.na(n),         true = \"\",         false = \"%\"       )     )   ) |>     dplyr::arrange(desc(n))    iso_range_vars_tbl <- dplyr::select(iso_range_vars, ID,     `ISO range` = iso_range,     N = n,     Percent   )   return(iso_range_vars_tbl) } seg_iso_range_tbl(risk_vars_tbl) #> # A tibble: 5 × 4 #>      ID `ISO range`             N Percent #>   <int> <chr>               <int> <chr>   #> 1     1 <= 5% or 5 mg/dL     5328 54%     #> 2     2 > 5 - 10% or mg/dL   2842 28.8%   #> 3     3 > 10 - 15% or mg/dL  1050 10.6%   #> 4     4 > 15 - 20% mg/dL      340 3.4%    #> 5     5 > 20% or 20 mg/dL     308 3.1%"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"application-isorangetable","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > ISO Range Table","what":"Application ISORangeTable","title":"Risk Tables","text":"output ISORangeTable application  ’ve re-created app_iso_range_tbl :","code":"app_iso_range_tbl <- tibble::tribble(      ~ID,          ~`ISO range`,    ~N, ~Percent,       1L,    \"<= 5% or 5 mg/dL\", 5328L,    \"54%\",       2L,  \"> 5 - 10% or mg/dL\", 2842L,  \"28.8%\",       3L, \"> 10 - 15% or mg/dL\", 1050L,  \"10.6%\",       4L,    \"> 15 - 20% mg/dL\",  340L,   \"3.4%\",       5L,   \"> 20% or 20 mg/dL\",  308L,   \"3.1%\"      ) app_iso_range_tbl"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"test-4","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > ISO Range Table","what":"Test","title":"Risk Tables","text":"test two ISORangeTable tables","code":"testthat::test_that(\"Test risk grade table\", { testthat::expect_equal(   # function table   object = seg_iso_range_tbl(risk_vars_tbl),   # application table   expected = app_iso_range_tbl   ) }) #> Test passed 🥇"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"compliant-pairs-table","dir":"Articles","previous_headings":"Application (version 1.3.3) functions","what":"Compliant Pairs Table","title":"Risk Tables","text":"compliant pairs table created binomialTable() function original application, uses output segTable() (’ve replaced seg_risk_vars()). ’ve re-written seg_binom_tbl()","code":"binomialTable <- function(dat) {    dataset <- segTable(dat)    CompliantPairs <- nrow(dataset) - base::nrow(dplyr::filter(     dataset, iso_diff > 15)) %>%   tibble(     `Compliant Pairs` = .) # CompliantPairs # Then calculate the percent CompliantPairs <- CompliantPairs %>%   dplyr::mutate(     `Compliant Pairs %` =       base::paste0(base::round(         100 * `Compliant Pairs` / nrow(dataset),         1       ), \"%\") ) # CompliantPairs # create probability prb <- 0.95 p_value <- 0.05 df_size <- nrow(dataset) qbinom_tibble <- qbinom(     p = p_value,     size = df_size,     prob = prb) %>%     tibble(`value` = .) %>%     # clean up this variable in the tibble for display     dplyr::rename(`Lower Bound for Acceptance` = value) # qbinom_tibble QbinomTable <- qbinom_tibble %>%   dplyr::mutate(     `Lower Bound for Acceptance %` =       base::paste0(base::round(         100 * `Lower Bound for Acceptance` / nrow(dataset),         1       ), \"%\")   ) BinomialTest6 <- bind_cols(CompliantPairs, QbinomTable) BinomialTest6 <- BinomialTest6 %>% dplyr::mutate(   Result =     if_else(condition = `Compliant Pairs` < `Lower Bound for Acceptance`,       true = paste0(         BinomialTest6$`Compliant Pairs %`[1],         \" < \",         BinomialTest6$`Lower Bound for Acceptance %`[1],         \" - Does not meet BGM Surveillance Study Accuracy Standard\"       ),       false = paste0(         BinomialTest6$`Compliant Pairs %`[1],         \" > \",         BinomialTest6$`Lower Bound for Acceptance %`[1],         \" - Meets BGM Surveillance Study Accuracy Standard\"       )     ) ) return(BinomialTest6) }"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"seg_binom_tbl","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > Compliant Pairs Table","what":"seg_binom_tbl()","title":"Risk Tables","text":"check seg_binom_tbl() output seg_risk_vars()","code":"seg_binom_tbl <- function(risk_vars) {      compliant_pairs <- tibble(`Compliant Pairs` =          base::nrow(risk_vars) - base::nrow(dplyr::filter(risk_vars, iso_diff > 15)))    # calculate the percent   compliant_pairs_perc <-     dplyr::mutate(compliant_pairs,       `Compliant Pairs %` =         base::paste0(base::round(           100 * `Compliant Pairs` / nrow(risk_vars),           1         ), \"%\")     )   # create probability   prb <- 0.95   p_value <- 0.05   df_size <- nrow(risk_vars)   qbinom_vector <- qbinom(     p = p_value,     size = df_size,     prob = prb   )     qbinom_tbl <- tibble(`Lower Bound for Acceptance` = qbinom_vector)     # clean up this variable in the tibble for display   # qbinom_tbl     qbinom_tbl <- dplyr::mutate(qbinom_tbl,       `Lower Bound for Acceptance %` =         base::paste0(base::round(           100 * `Lower Bound for Acceptance` / nrow(risk_vars),           1         ), \"%\")     )    binom_test_tbl <- dplyr::bind_cols(compliant_pairs_perc, qbinom_tbl)    binom_table <- dplyr::mutate(binom_test_tbl,     Result =       dplyr::if_else(condition = `Compliant Pairs` < `Lower Bound for Acceptance`,         true = paste0(           binom_test_tbl$`Compliant Pairs %`[1],           \" < \",           binom_test_tbl$`Lower Bound for Acceptance %`[1],           \" - Does not meet BGM Surveillance Study Accuracy Standard\"         ),         false = paste0(           binom_test_tbl$`Compliant Pairs %`[1],           \" > \",           binom_test_tbl$`Lower Bound for Acceptance %`[1],           \" - Meets BGM Surveillance Study Accuracy Standard\"         )       )   )   return(binom_table) } seg_binom_tbl(risk_vars = risk_vars_tbl)"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"application-binomialtest-table","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > Compliant Pairs Table > seg_binom_tbl()","what":"Application BinomialTest table","title":"Risk Tables","text":"binomial test table (aka compliant pairs table) application.  ’ve re-created table app_binomial_tbl :","code":"app_binomial_tbl <- tibble::as_tibble(data.frame(   stringsAsFactors = FALSE,   check.names = FALSE,   `Compliant Pairs` = c(9220L),   `Compliant Pairs %` = c(\"93.4%\"),   `Lower Bound for Acceptance` = c(9339L),   `Lower Bound for Acceptance %` = c(\"94.6%\"),   Result = c(\"93.4% < 94.6% - Does not meet BGM Surveillance Study Accuracy Standard\") )) app_binomial_tbl"},{"path":"https://mjfrigaard.github.io/segtools/articles/risk-tables.html","id":"test-5","dir":"Articles","previous_headings":"Application (version 1.3.3) functions > Compliant Pairs Table > seg_binom_tbl()","what":"Test","title":"Risk Tables","text":"’ll final test binomial test table.","code":"testthat::test_that(\"Test compliant pairs table\", { testthat::expect_equal(   # function table   object = seg_binom_tbl(risk_vars = risk_vars_tbl),   # application table   expected = app_binomial_tbl   ) }) #> Test passed 🌈"},{"path":"https://mjfrigaard.github.io/segtools/articles/segtools.html","id":"summary-tables","dir":"Articles","previous_headings":"","what":"Summary Tables","title":"Getting started","text":"summary tables rely separate functions table.","code":""},{"path":"https://mjfrigaard.github.io/segtools/articles/segtools.html","id":"pairs-table","dir":"Articles","previous_headings":"Summary Tables","what":"Pairs table","title":"Getting started","text":"seg_pairs_table() returns pairs comparing BGM REF","code":"seg_pair_type_tbl(df = test_data)"},{"path":"https://mjfrigaard.github.io/segtools/articles/segtools.html","id":"mard-table","dir":"Articles","previous_headings":"Summary Tables","what":"MARD table","title":"Getting started","text":"MARD table requires two functions: seg_risk_vars() calculate intermediate risk variables seg_mard_tbl() calculate Bias, MARD, CV, lower/upper 95% CI","code":"risk_vars_tbl <- seg_risk_vars(df = test_data) seg_mard_tbl(risk_vars_tbl)"},{"path":"https://mjfrigaard.github.io/segtools/articles/segtools.html","id":"risk-grade-table","dir":"Articles","previous_headings":"Summary Tables","what":"Risk grade table","title":"Getting started","text":"seg_risk_grade_tbl() returns table risk grades","code":"seg_risk_grade_tbl(risk_vars_tbl)"},{"path":"https://mjfrigaard.github.io/segtools/articles/segtools.html","id":"risk-category-table","dir":"Articles","previous_headings":"Summary Tables","what":"Risk category table","title":"Getting started","text":"seg_risk_level_table() return table risk levels categories","code":"seg_risk_cat_tbl(risk_vars_tbl)"},{"path":"https://mjfrigaard.github.io/segtools/articles/segtools.html","id":"iso-range-table","dir":"Articles","previous_headings":"Summary Tables","what":"ISO range table","title":"Getting started","text":"seg_iso_range_tbl() returns table compliance ranges","code":"seg_iso_range_tbl(risk_vars_tbl)"},{"path":"https://mjfrigaard.github.io/segtools/articles/segtools.html","id":"compliant-pairs-table","dir":"Articles","previous_headings":"Summary Tables","what":"Compliant pairs table","title":"Getting started","text":"seg_binom_tbl() returns table binomial test compliant pairs","code":"seg_binom_tbl(risk_vars_tbl)"},{"path":"https://mjfrigaard.github.io/segtools/articles/segtools.html","id":"graphs","dir":"Articles","previous_headings":"","what":"Graphs","title":"Getting started","text":"segtools can also create following graphs:","code":""},{"path":"https://mjfrigaard.github.io/segtools/articles/segtools.html","id":"the-seg-graph","dir":"Articles","previous_headings":"Graphs","what":"The SEG Graph","title":"Getting started","text":"","code":"seg_graph(   data = test_data,   is_path = FALSE,   alpha_var = 3 / 4,   size_var = 2.5,   color_var = \"gray85\" )"},{"path":"https://mjfrigaard.github.io/segtools/articles/segtools.html","id":"the-modified-bland-altman-plot","dir":"Articles","previous_headings":"Graphs","what":"The Modified Bland-Altman Plot","title":"Getting started","text":"","code":"seg_modba_graph(data = test_data)"},{"path":"https://mjfrigaard.github.io/segtools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Frigaard. Maintainer, author.","code":""},{"path":"https://mjfrigaard.github.io/segtools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frigaard M (2023). segtools: surveillance error grid tools. R package version 0.0.0.9000, https://mjfrigaard.github.io/segtools/.","code":"@Manual{,   title = {segtools: The surveillance error grid tools},   author = {Martin Frigaard},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://mjfrigaard.github.io/segtools/}, }"},{"path":"https://mjfrigaard.github.io/segtools/index.html","id":"segtools","dir":"","previous_headings":"","what":"The surveillance error grid tools","title":"The surveillance error grid tools","text":"segtools provides underlying functions calculations SURVEILLANCE ERROR GRID (SEG)","code":""},{"path":"https://mjfrigaard.github.io/segtools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"The surveillance error grid tools","text":"can install development version segtools GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"mjfrigaard/segtools\")"},{"path":"https://mjfrigaard.github.io/segtools/index.html","id":"seg-graph","dir":"","previous_headings":"","what":"SEG Graph","title":"The surveillance error grid tools","text":"SEG graph can created dataset BGM REF values:  Read .","code":"library(segtools) library(vroom) # import data test_data <- vroom::vroom(   file =     system.file(\"extdata\", \"AppTestData.csv\",         package = \"segtools\"), delim = \",\") # plot segtools::seg_grid(   data = test_data,   is_path = FALSE,   alpha_var = 3 / 4,   size_var = 2.5,   color_var = \"gray85\" )"},{"path":"https://mjfrigaard.github.io/segtools/reference/get_extdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data files from inst/extdata/ folder — get_extdata","title":"Import data files from inst/extdata/ folder — get_extdata","text":"Intended used inside pakcage folder","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/get_extdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data files from inst/extdata/ folder — get_extdata","text":"","code":"get_extdata(file_name)"},{"path":"https://mjfrigaard.github.io/segtools/reference/get_extdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data files from inst/extdata/ folder — get_extdata","text":"file_name name file","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/get_extdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data files from inst/extdata/ folder — get_extdata","text":"data file","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/get_extdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data files from inst/extdata/ folder — get_extdata","text":"","code":"# meant to be used for package development! # get_extdata(\"RiskPairData.csv\") # get_extdata(\"AppRiskPairData.csv\")"},{"path":"https://mjfrigaard.github.io/segtools/reference/get_importFrom.html","id":null,"dir":"Reference","previous_headings":"","what":"Get roxygen2 tags (@importFrom) — get_importFrom","title":"Get roxygen2 tags (@importFrom) — get_importFrom","text":"Get roxygen2 tags (@importFrom)","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/get_importFrom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get roxygen2 tags (@importFrom) — get_importFrom","text":"","code":"get_importFrom(pkg, fun = NULL)"},{"path":"https://mjfrigaard.github.io/segtools/reference/get_importFrom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get roxygen2 tags (@importFrom) — get_importFrom","text":"pkg package (must installed) fun string function names","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/get_importFrom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get roxygen2 tags (@importFrom) — get_importFrom","text":"tags roxygen2","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/get_importFrom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get roxygen2 tags (@importFrom) — get_importFrom","text":"","code":"require(bs4Dash) #> Loading required package: bs4Dash #> Warning: there is no package called ‘bs4Dash’ get_importFrom(pkg = 'bs4Dash', fun = 'valueBox') #> Error in as.environment(pos): no item called \"package:bs4Dash\" on the search list"},{"path":"https://mjfrigaard.github.io/segtools/reference/get_pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get installed packages — get_pkgs","title":"Get installed packages — get_pkgs","text":"Get installed packages","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/get_pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get installed packages — get_pkgs","text":"","code":"get_pkgs()"},{"path":"https://mjfrigaard.github.io/segtools/reference/get_pkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get installed packages — get_pkgs","text":"character vector installed packages","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/get_pkgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get installed packages — get_pkgs","text":"","code":"get_pkgs() #> c(\"R6\", \"RColorBrewer\", \"Rttf2pt1\", \"askpass\", \"base64enc\", \"bit\",  #> \"bit64\", \"brio\", \"bslib\", \"cachem\", \"callr\", \"cli\", \"colorspace\",  #> \"cpp11\", \"crayon\", \"curl\", \"desc\", \"diffobj\", \"digest\", \"downlit\",  #> \"dplyr\", \"ellipsis\", \"evaluate\", \"extrafont\", \"extrafontdb\",  #> \"fansi\", \"farver\", \"fastmap\", \"fs\", \"generics\", \"ggplot2\", \"glue\",  #> \"gtable\", \"highr\", \"hms\", \"htmltools\", \"httr\", \"isoband\", \"janitor\",  #> \"jquerylib\", \"jsonlite\", \"knitr\", \"labeling\", \"lifecycle\", \"lubridate\",  #> \"magrittr\", \"memoise\", \"mime\", \"munsell\", \"openssl\", \"pak\", \"pillar\",  #> \"pkgconfig\", \"pkgdown\", \"pkgload\", \"png\", \"praise\", \"prettyunits\",  #> \"processx\", \"progress\", \"ps\", \"purrr\", \"ragg\", \"rappdirs\", \"rematch2\",  #> \"renv\", \"rlang\", \"rmarkdown\", \"rprojroot\", \"sass\", \"scales\",  #> \"segtools\", \"sessioninfo\", \"showtext\", \"showtextdb\", \"snakecase\",  #> \"stringi\", \"stringr\", \"sys\", \"sysfonts\", \"systemfonts\", \"testthat\",  #> \"textshaping\", \"tibble\", \"tidyr\", \"tidyselect\", \"timechange\",  #> \"tinytex\", \"tzdb\", \"utf8\", \"vctrs\", \"viridisLite\", \"vroom\", \"waldo\",  #> \"whisker\", \"withr\", \"xfun\", \"xml2\", \"yaml\", \"KernSmooth\", \"MASS\",  #> \"Matrix\", \"base\", \"boot\", \"class\", \"cluster\", \"codetools\", \"compiler\",  #> \"datasets\", \"foreign\", \"grDevices\", \"graphics\", \"grid\", \"lattice\",  #> \"methods\", \"mgcv\", \"nlme\", \"nnet\", \"parallel\", \"rpart\", \"spatial\",  #> \"splines\", \"stats\", \"stats4\", \"survival\", \"tcltk\", \"tools\", \"utils\" #> )"},{"path":"https://mjfrigaard.github.io/segtools/reference/get_seg_data.html","id":null,"dir":"Reference","previous_headings":"","what":"SEG data switch — get_seg_data","title":"SEG data switch — get_seg_data","text":"SEG data switch","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/get_seg_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SEG data switch — get_seg_data","text":"","code":"get_seg_data(data)"},{"path":"https://mjfrigaard.github.io/segtools/reference/import_flat_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Import plain text data file — import_flat_file","title":"Import plain text data file — import_flat_file","text":"Import plain text data file","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/import_flat_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import plain text data file — import_flat_file","text":"","code":"import_flat_file(path)"},{"path":"https://mjfrigaard.github.io/segtools/reference/import_flat_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import plain text data file — import_flat_file","text":"path path file","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/import_flat_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import plain text data file — import_flat_file","text":"imported flat file","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/list_extdata_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Find inst/extdata/ paths — list_extdata_paths","title":"Find inst/extdata/ paths — list_extdata_paths","text":"Find inst/extdata/ paths","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/list_extdata_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find inst/extdata/ paths — list_extdata_paths","text":"","code":"list_extdata_paths()"},{"path":"https://mjfrigaard.github.io/segtools/reference/list_extdata_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find inst/extdata/ paths — list_extdata_paths","text":"list absolute file paths inst/extdata","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/list_extdata_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find inst/extdata/ paths — list_extdata_paths","text":"","code":"list_extdata_paths() #> character(0)"},{"path":"https://mjfrigaard.github.io/segtools/reference/rgb2hex.html","id":null,"dir":"Reference","previous_headings":"","what":"RGB to hex color — rgb2hex","title":"RGB to hex color — rgb2hex","text":"RGB hex color","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/rgb2hex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RGB to hex color — rgb2hex","text":"","code":"rgb2hex(r, g, b)"},{"path":"https://mjfrigaard.github.io/segtools/reference/rgb2hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RGB to hex color — rgb2hex","text":"r red g green b blue","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/rgb2hex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RGB to hex color — rgb2hex","text":"colors hex","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/rgb2hex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RGB to hex color — rgb2hex","text":"","code":"rgb2hex(0, 165, 0) #> [1] \"#00A500\""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_binom_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Create compliant pairs table — seg_binom_tbl","title":"Create compliant pairs table — seg_binom_tbl","text":"Create compliant pairs table","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_binom_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create compliant pairs table — seg_binom_tbl","text":"","code":"seg_binom_tbl(risk_vars)"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_binom_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create compliant pairs table — seg_binom_tbl","text":"risk_vars output seg_risk_vars()","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_binom_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create compliant pairs table — seg_binom_tbl","text":"Binomial test table","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_binom_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create compliant pairs table — seg_binom_tbl","text":"","code":"test_data <- vroom::vroom(                 system.file(\"extdata\", \"VanderbiltComplete.csv\",                 package = \"segtools\"), delim = \",\") #> Rows: 9891 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): BGM, REF #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. risk_cols_tbl <- seg_risk_vars(df = test_data) seg_binom_tbl(risk_cols_tbl) #> # A tibble: 1 × 5 #>   `Compliant Pairs` `Compliant Pairs %` `Lower Bound for Acceptance` #>               <int> <chr>                                      <dbl> #> 1              9220 93.4%                                       9339 #> # ℹ 2 more variables: `Lower Bound for Acceptance %` <chr>, Result <chr>"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2 function for SEG grid — seg_graph","title":"ggplot2 function for SEG grid — seg_graph","text":"ggplot2 function SEG grid","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2 function for SEG grid — seg_graph","text":"","code":"seg_graph(data, is_path, alpha_var, size_var, color_var)"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2 function for SEG grid — seg_graph","text":"data Dataset containing BGM REF columns is_path logical, dataset path dataset alpha_var alpha setting size_var size setting color_var color setting","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot2 function for SEG grid — seg_graph","text":"SEG grid graph","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_iso_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — seg_iso_cols","title":"Title — seg_iso_cols","text":"Title","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_iso_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — seg_iso_cols","text":"","code":"seg_iso_cols(risk_cat_cols)"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_iso_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — seg_iso_cols","text":"risk_cat_cols output seg_risk_cat_cols()","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_iso_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — seg_iso_cols","text":"ISO range variable table","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_iso_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — seg_iso_cols","text":"","code":"test_data <- vroom::vroom(                 system.file(\"extdata\", \"VanderbiltComplete.csv\",                 package = \"segtools\"), delim = \",\") #> Rows: 9891 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): BGM, REF #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. risk_cat_tbl <- seg_risk_cat_cols(test_data) seg_iso_cols(risk_cat_cols = risk_cat_tbl) #> # A tibble: 9,868 × 19 #>      BGM   REF bgm_pair_cat ref_pair_2cat included         RiskPairID RiskFactor #>    <dbl> <dbl> <chr>        <chr>         <chr>                 <dbl>      <dbl> #>  1   121   127 BGM < REF    NA            Total included …      72849    0.00254 #>  2   212   223 BGM < REF    NA            Total included …     127636    0.0280  #>  3   161   166 BGM < REF    NA            Total included …      96928    0       #>  4   191   205 BGM < REF    NA            Total included …     114997    0.206   #>  5   189   210 BGM < REF    NA            Total included …     113800    0.209   #>  6   104   100 BGM > REF    NA            Total included …      62605   -0.125   #>  7   293   296 BGM < REF    NA            Total included …     176390    0       #>  8   130   142 BGM < REF    NA            Total included …      78273    0.267   #>  9   261   231 BGM > REF    NA            Total included …     157093   -0.285   #> 10   147   148 BGM < REF    NA            Total included …      88496    0       #> # ℹ 9,858 more rows #> # ℹ 12 more variables: abs_risk <dbl>, risk_cat <dbl>, ABSLB <dbl>, #> #   ABSUB <dbl>, risk_cat_txt <chr>, rel_diff <dbl>, abs_rel_diff <dbl>, #> #   sq_rel_diff <dbl>, iso_diff <dbl>, iso_range <chr>, risk_grade <chr>, #> #   risk_grade_txt <chr>"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_iso_range_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"SEG iso range table — seg_iso_range_tbl","title":"SEG iso range table — seg_iso_range_tbl","text":"SEG iso range table","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_iso_range_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SEG iso range table — seg_iso_range_tbl","text":"","code":"seg_iso_range_tbl(risk_vars)"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_iso_range_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SEG iso range table — seg_iso_range_tbl","text":"risk_vars output seg_risk_vars()","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_iso_range_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SEG iso range table — seg_iso_range_tbl","text":"ISO range variables","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_iso_range_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SEG iso range table — seg_iso_range_tbl","text":"","code":"test_data <- vroom::vroom(                 system.file(\"extdata\", \"VanderbiltComplete.csv\",                 package = \"segtools\"), delim = \",\") #> Rows: 9891 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): BGM, REF #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. risk_cols_tbl <- seg_risk_vars(df = test_data) seg_iso_range_tbl(risk_cols_tbl) #> # A tibble: 5 × 4 #>      ID `ISO range`             N Percent #>   <int> <chr>               <int> <chr>   #> 1     1 <= 5% or 5 mg/dL     5328 54%     #> 2     2 > 5 - 10% or mg/dL   2842 28.8%   #> 3     3 > 10 - 15% or mg/dL  1050 10.6%   #> 4     4 > 15 - 20% mg/dL      340 3.4%    #> 5     5 > 20% or 20 mg/dL     308 3.1%"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_mard_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"SEG MARD table — seg_mard_tbl","title":"SEG MARD table — seg_mard_tbl","text":"SEG MARD table","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_mard_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SEG MARD table — seg_mard_tbl","text":"","code":"seg_mard_tbl(risk_vars)"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_mard_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SEG MARD table — seg_mard_tbl","text":"risk_vars output seg_risk_vars()","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_mard_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SEG MARD table — seg_mard_tbl","text":"MARD table","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_mard_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SEG MARD table — seg_mard_tbl","text":"","code":"test_data <- vroom::vroom(                 system.file(\"extdata\", \"VanderbiltComplete.csv\",                 package = \"segtools\"), delim = \",\") #> Rows: 9891 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): BGM, REF #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. risk_cols_tbl <- seg_risk_vars(df = test_data) seg_mard_tbl(risk_cols_tbl) #> # A tibble: 1 × 6 #>   Total Bias  MARD  CV    `Lower 95% Limit of Agreement` Upper 95% Limit of Ag…¹ #>   <int> <chr> <chr> <chr> <chr>                          <chr>                   #> 1  9868 0.6%  7%    14.8% -28.3%                         29.6%                   #> # ℹ abbreviated name: ¹​`Upper 95% Limit of Agreement`"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_modba_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"The SEG modified Bland-Altman plot — seg_modba_graph","title":"The SEG modified Bland-Altman plot — seg_modba_graph","text":"SEG modified Bland-Altman plot","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_modba_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The SEG modified Bland-Altman plot — seg_modba_graph","text":"","code":"seg_modba_graph(data)"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_modba_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The SEG modified Bland-Altman plot — seg_modba_graph","text":"data Dataset containing BGM REF columns is_path logical, dataset path dataset","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_modba_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The SEG modified Bland-Altman plot — seg_modba_graph","text":"modified Bland-Altman plot","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_modba_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The SEG modified Bland-Altman plot — seg_modba_graph","text":"","code":"require(vroom) #> Loading required package: vroom vanderbilt_complete <- vroom::vroom(  file =    system.file(\"extdata\", \"VanderbiltComplete.csv\",                package = \"segtools\"), delim = \",\") #> Rows: 9891 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): BGM, REF #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. seg_modba_graph(data = vanderbilt_complete, is_path = FALSE) #> Error in seg_modba_graph(data = vanderbilt_complete, is_path = FALSE): unused argument (is_path = FALSE)"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_pair_type_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"SEG pairs type table — seg_pair_type_tbl","title":"SEG pairs type table — seg_pair_type_tbl","text":"SEG pairs type table","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_pair_type_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SEG pairs type table — seg_pair_type_tbl","text":"","code":"seg_pair_type_tbl(df)"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_pair_type_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SEG pairs type table — seg_pair_type_tbl","text":"df data BGM REF columns","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_pair_type_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SEG pairs type table — seg_pair_type_tbl","text":"pair type columns","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_pair_type_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SEG pairs type table — seg_pair_type_tbl","text":"","code":"test_data <- vroom::vroom(                 system.file(\"extdata\", \"VanderbiltComplete.csv\",                 package = \"segtools\"), delim = \",\") #> Rows: 9891 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): BGM, REF #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. seg_pair_type_tbl(test_data) #> # A tibble: 6 × 2 #>   `Pair Type`                           Count #>   <chr>                                 <int> #> 1 Total                                  9891 #> 2 BGM < REF                              4710 #> 3 BGM = REF                               479 #> 4 BGM > REF                              4702 #> 5 REF > 600: Excluded from SEG Analysis    23 #> 6 Total included in SEG Analysis         9868"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_cat_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"SEG risk category variables — seg_risk_cat_cols","title":"SEG risk category variables — seg_risk_cat_cols","text":"SEG risk category variables","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_cat_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SEG risk category variables — seg_risk_cat_cols","text":"","code":"seg_risk_cat_cols(df)"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_cat_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SEG risk category variables — seg_risk_cat_cols","text":"df data BGM REF columns","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_cat_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SEG risk category variables — seg_risk_cat_cols","text":"seg risk category columns table","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_cat_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SEG risk category variables — seg_risk_cat_cols","text":"","code":"test_data <- vroom::vroom(                 system.file(\"extdata\", \"VanderbiltComplete.csv\",                 package = \"segtools\"), delim = \",\") #> Rows: 9891 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): BGM, REF #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. seg_risk_cat_cols(test_data) #> # A tibble: 9,868 × 12 #>      BGM   REF bgm_pair_cat ref_pair_2cat included         RiskPairID RiskFactor #>    <dbl> <dbl> <chr>        <chr>         <chr>                 <dbl>      <dbl> #>  1   121   127 BGM < REF    NA            Total included …      72849    0.00254 #>  2   212   223 BGM < REF    NA            Total included …     127636    0.0280  #>  3   161   166 BGM < REF    NA            Total included …      96928    0       #>  4   191   205 BGM < REF    NA            Total included …     114997    0.206   #>  5   189   210 BGM < REF    NA            Total included …     113800    0.209   #>  6   104   100 BGM > REF    NA            Total included …      62605   -0.125   #>  7   293   296 BGM < REF    NA            Total included …     176390    0       #>  8   130   142 BGM < REF    NA            Total included …      78273    0.267   #>  9   261   231 BGM > REF    NA            Total included …     157093   -0.285   #> 10   147   148 BGM < REF    NA            Total included …      88496    0       #> # ℹ 9,858 more rows #> # ℹ 5 more variables: abs_risk <dbl>, risk_cat <dbl>, ABSLB <dbl>, ABSUB <dbl>, #> #   risk_cat_txt <chr>"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_cat_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"SEG risk category table — seg_risk_cat_tbl","title":"SEG risk category table — seg_risk_cat_tbl","text":"SEG risk category table","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_cat_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SEG risk category table — seg_risk_cat_tbl","text":"","code":"seg_risk_cat_tbl(risk_vars)"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_cat_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SEG risk category table — seg_risk_cat_tbl","text":"risk_vars output seg_risk_vars()","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_cat_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SEG risk category table — seg_risk_cat_tbl","text":"risk cat variable table","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_cat_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SEG risk category table — seg_risk_cat_tbl","text":"","code":"test_data <- vroom::vroom(                 system.file(\"extdata\", \"VanderbiltComplete.csv\",                 package = \"segtools\"), delim = \",\") #> Rows: 9891 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): BGM, REF #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. risk_cols_tbl <- seg_risk_vars(df = test_data) seg_risk_cat_tbl(risk_cols_tbl) #> # A tibble: 8 × 4 #>   `SEG Risk Level` `SEG Risk Category` `Number of Pairs` Percent #>              <dbl> <chr>                           <int> <chr>   #> 1                0 None                             9474 96%     #> 2                1 Slight, Lower                     294 3%      #> 3                2 Slight, Higher                     55 0.6%    #> 4                3 Moderate, Lower                    24 0.2%    #> 5                4 Moderate, Higher                   11 0.1%    #> 6                5 Severe, Lower                      10 0.1%    #> 7                6 Severe, Upper                      NA NA      #> 8                7 Extreme                            NA NA"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_grade_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"SEG risk grade table — seg_risk_grade_tbl","title":"SEG risk grade table — seg_risk_grade_tbl","text":"SEG risk grade table","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_grade_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SEG risk grade table — seg_risk_grade_tbl","text":"","code":"seg_risk_grade_tbl(risk_vars)"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_grade_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SEG risk grade table — seg_risk_grade_tbl","text":"risk_vars output seg_risk_vars()","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_grade_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SEG risk grade table — seg_risk_grade_tbl","text":"risk grade table","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_grade_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SEG risk grade table — seg_risk_grade_tbl","text":"","code":"test_data <- vroom::vroom(                 system.file(\"extdata\", \"VanderbiltComplete.csv\",                 package = \"segtools\"), delim = \",\") #> Rows: 9891 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): BGM, REF #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. risk_cols_tbl <- seg_risk_vars(df = test_data) seg_risk_grade_tbl(risk_cols_tbl) #> # A tibble: 5 × 5 #>      ID `Risk Grade` `Number of Pairs` Percent `Risk Factor Range` #>   <dbl> <chr>                    <int> <chr>   <chr>               #> 1     1 A                         9474 96%     0 - 0.5             #> 2     2 B                          349 3.5%    > 0.5 - 1.0         #> 3     3 C                           35 0.4%    > 1.0 - 2.0         #> 4     4 D                           10 0.1%    > 2.0 - 3.0         #> 5     5 E                           NA NA      > 3.0"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"SEG risk columns (wrapper function) — seg_risk_vars","title":"SEG risk columns (wrapper function) — seg_risk_vars","text":"SEG risk columns (wrapper function)","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SEG risk columns (wrapper function) — seg_risk_vars","text":"","code":"seg_risk_vars(df)"},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SEG risk columns (wrapper function) — seg_risk_vars","text":"df data BGM REF columns","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SEG risk columns (wrapper function) — seg_risk_vars","text":"SEG risk columns","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/seg_risk_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SEG risk columns (wrapper function) — seg_risk_vars","text":"","code":"test_data <- vroom::vroom(                 system.file(\"extdata\", \"VanderbiltComplete.csv\",                 package = \"segtools\"), delim = \",\") #> Rows: 9891 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): BGM, REF #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. seg_risk_vars(df = test_data) #> # A tibble: 9,868 × 19 #>      BGM   REF bgm_pair_cat ref_pair_2cat included         RiskPairID RiskFactor #>    <dbl> <dbl> <chr>        <chr>         <chr>                 <dbl>      <dbl> #>  1   121   127 BGM < REF    NA            Total included …      72849    0.00254 #>  2   212   223 BGM < REF    NA            Total included …     127636    0.0280  #>  3   161   166 BGM < REF    NA            Total included …      96928    0       #>  4   191   205 BGM < REF    NA            Total included …     114997    0.206   #>  5   189   210 BGM < REF    NA            Total included …     113800    0.209   #>  6   104   100 BGM > REF    NA            Total included …      62605   -0.125   #>  7   293   296 BGM < REF    NA            Total included …     176390    0       #>  8   130   142 BGM < REF    NA            Total included …      78273    0.267   #>  9   261   231 BGM > REF    NA            Total included …     157093   -0.285   #> 10   147   148 BGM < REF    NA            Total included …      88496    0       #> # ℹ 9,858 more rows #> # ℹ 12 more variables: abs_risk <dbl>, risk_cat <dbl>, ABSLB <dbl>, #> #   ABSUB <dbl>, risk_cat_txt <chr>, rel_diff <dbl>, abs_rel_diff <dbl>, #> #   sq_rel_diff <dbl>, iso_diff <dbl>, iso_range <chr>, risk_grade <chr>, #> #   risk_grade_txt <chr>"},{"path":"https://mjfrigaard.github.io/segtools/reference/theme_seg.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2 theme (for SEG grid) — theme_seg","title":"ggplot2 theme (for SEG grid) — theme_seg","text":"ggplot2 theme (SEG grid)","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/theme_seg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2 theme (for SEG grid) — theme_seg","text":"","code":"theme_seg(   base_size = 11,   base_family = \"Ubuntu\",   base_line_size = base_size/22,   base_rect_size = base_size/22 )"},{"path":"https://mjfrigaard.github.io/segtools/reference/theme_seg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2 theme (for SEG grid) — theme_seg","text":"base_size font size base_family font family base_line_size base graph line size base_rect_size base graph rectangle size","code":""},{"path":"https://mjfrigaard.github.io/segtools/reference/theme_seg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot2 theme (for SEG grid) — theme_seg","text":"ggplot2 theme","code":""},{"path":"https://mjfrigaard.github.io/segtools/news/index.html","id":"segtools-110","dir":"Changelog","previous_headings":"","what":"segtools 1.1.0","title":"segtools 1.1.0","text":"Updated functions standardize names: functions outputs _cols suffix intermediate/utility functions functions outputs _vars suffix create outputs primary _tbl _graph functions input arguments align function names (.e. seg_risk_vars() creates output functions risk_vars argument) Re-written risk-tables vignette organized.","code":""},{"path":"https://mjfrigaard.github.io/segtools/news/index.html","id":"segtools-100","dir":"Changelog","previous_headings":"","what":"segtools 1.0.0","title":"segtools 1.0.0","text":"Updated package functions match shiny application outputs See vignette risk-tables  Unit tests function Data previous build accessible get_seg_data() function Use get_seg_data('names') list datasets","code":"==> devtools::test()  ℹ Testing segtools ✔ | F W S  OK | Context ✔ |         1 | seg_binom_tbl [0.5s]                      ✔ |         1 | seg_iso_range_tbl [0.4s]                     ✔ |         1 | seg_iso_cols [0.3s]                          ✔ |         1 | seg_pair_type_tbl                            ✔ |         1 | seg_risk_cat_tbl [0.3s]                     ✔ |         1 | seg_risk_cat_cols [0.3s]                    ✔ |         1 | seg_risk_vars [0.6s]                        ✔ |         1 | seg_risk_grade_tbl [0.3s]                    ══ Results ═══════════════════════════════════ Duration: 2.8 s  [ FAIL 0 | WARN 0 | SKIP 0 | PASS 8 ] get_seg_data('VanderbiltComplete') # A tibble: 9,891 × 2                                                                  BGM   REF    <dbl> <dbl>  1   121   127  2   212   223  3   161   166  4   191   205  5   189   210  6   104   100  7   293   296  8   130   142  9   261   231 10   147   148 # … with 9,881 more rows # ℹ Use `print(n = ...)` to see more rows get_seg_data('names')  [1] \"VanderbiltComplete.csv\"   \"AppRiskPairData.csv\"      \"RiskPairData.csv\"          [4] \"AppLookUpRiskCat.csv\"     \"LookUpRiskCat.csv\"        \"AppTestData.csv\"           [7] \"AppTestDataSmall.csv\"     \"AppTestDataMed.csv\"       \"AppTestDataBig.csv\"       [10] \"FullSampleData.csv\"       \"ModBAData.csv\"            \"No_Interference_Dogs.csv\" [13] \"SEGRiskTable.csv\"         \"SampMeasData.csv\"         \"SampleData.csv\"           [16] \"lkpRiskGrade.csv\"         \"lkpSEGRiskCat4.csv\""},{"path":"https://mjfrigaard.github.io/segtools/news/index.html","id":"segtools-001","dir":"Changelog","previous_headings":"","what":"segtools 0.0.1","title":"segtools 0.0.1","text":"package configured use pak + renv including renv.config.pak.enabled = TRUE .Rprofile","code":""},{"path":[]},{"path":"https://mjfrigaard.github.io/segtools/news/index.html","id":"pkgdown-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"pkgdown","title":"segtools 0.0.0.9000","text":"Building pkgdown version package nightmare. various pkgdown builds/failures listed : Build #1 pkgdown build #3 #2 pkgdown build #5 #3 error readxl removing readxl package, build worked (almost). Buildpkgdown build #7 #5 deploy step encountered error: process '/usr/bin/git' failed exit code 128 ❌ required changing settings Settings > Actions > General > change Workflow permissions Read write permissions Build #7 Added NEWS.md file track changes package.","code":"✖ Failed to build segtools 0.0.0.9000   Error:    ! error in pak subprocess   Caused by error in `stop_task_build(state, worker)`:   ! Failed to build source package 'segtools'   Full installation output:   * installing *source* package ‘segtools’ ...   staged installation is only possible with locking   ** using non-staged installation   ** R   ** data   *** moving datasets to lazyload DB   ** inst   ** byte-compile and prepare package for lazy loading Error in loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]]) :      there is no package called ‘readxl’   Calls: <Anonymous> ... loadNamespace -> withRestarts -> withOneRestart -> doWithOneRestart   Execution halted   ERROR: lazy loading failed for package ‘segtools’   * removing ‘/tmp/RtmpHJLGW5/pkg-lib1352430479ed/segtools’   ---   Backtrace:   1. pak::lockfile_install(\".github/pkg.lock\")   2. pak:::remote(function(...) { …   3. err$throw(res$error)   ---   Subprocess backtrace:    1. base::withCallingHandlers(cli_message = function(msg) { …    2. get(\"lockfile_install_internal\", asNamespace(\"pak\"))(...)    3. plan$install()    4. pkgdepends::install_package_plan(plan, lib = private$library, num_workers = nw, …    5. base::withCallingHandlers({ …    6. pkgdepends:::handle_events(state, events)    7. pkgdepends:::handle_event(state, i)    8. pkgdepends:::stop_task(state, worker)    9. pkgdepends:::stop_task_build(state, worker)   10. base::throw(new_pkg_build_error(\"Failed to build source package {pkg}\", …   11. | base::signalCondition(cond)   12. global (function (e) …   Execution halted   Error: Process completed with exit code 1."}]
